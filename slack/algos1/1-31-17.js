// 1/31/2017 CIRCULAR QUEUE && PARTITION && SORT
// Circular Queue: When Queue’s tail or head approaches ‘size’, wrap around to [0] and continue. We cannot let tail and head meet – one can’t “lap” the other. Instead, enqueue(val) should fail: Queue is full. Ditto dequeue() if Queue is empty. Constructor requires a size argument. Starting there, let’s create a circular queue implementation!
// Partition: You have numerous values stored in a Stack. Divide the values in the stack into a group of positive numbers, and a group of numbers that are zero or less. You can change the order within those groups, but when you pop the values off the stack, all the positive numbers should come first, followed by all the non-positive numbers. Use only a Queue for additional storage
// Sort: Given a Stack containing numerical values, return the Stack with all of its' values in a sorted order. Use another Stack or a Queue (not both) for storage.
